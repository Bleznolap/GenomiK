# Recall the MAF formula: maf(g) = sum(g) / (2*N) = mean(g) / 2
maf <- colMeans(G, na.rm=TRUE)/2
# we can use the 'hist' function in R to plot histograms
hist(maf)
cmd <- sprintf("%s --bfile chr1_region_rv --pheno %s/rv_pheno.txt --pheno-name Pheno --glm allow-no-covars  --out test_plink", plink2_binary, files_dir)
cmd <- sprintf("%s --bfile chr1_region_rv --pheno %s/rv_pheno.txt --pheno-name Pheno --glm allow-no-covars  --out test_plink", plk_bn, Hm_dir)
system(cmd)
sv_pvals <- fread("test_plink.Pheno.glm.linear")
str(sv_pvals) # what variables are used to store p-values and effect sizes?
# determine the appropriate significance threshold
bonf_threshold <-
sv_pvals[ sv_pvals$P < bonf_threshold, ]
0.05/56
# determine the appropriate significance threshold
bonf_threshold <- 0.0008928571
sv_pvals[ sv_pvals$P < bonf_threshold, ]
# volcano plot hint: to make a scatterplot of variable var2 against var1 stored in the data frame, you can use:
with(sv_pvals, plot(x=var1, y=var2)) # change 'var1' and 'var2' to the right names in sv_pvals
dim(sv_pvals)
head(sv_pvals)
# volcano plot hint: to make a scatterplot of variable var2 against var1 stored in the data frame, you can use:
with(sv_pvals, plot(x=P, y=BETA)) # change 'var1' and 'var2' to the right names in sv_pvals
# CAST : count number of rare alleles for each person and determine if it is > 0
sum_alleles_per_sample <- rowSums(G)
burden.cast <- as.numeric( sum_alleles_per_sample > 0 )
# MZ : count number of sites with rare alleles for each person
burden.mz <- rowSums(G > 0)
# Weighted burden : weighted sum of genotype counts across sites
weights <- dbeta(maf, 1, 25)
burden.weighted <- G %*% weights
# e.g. for CAST
summary(lm(pheno_file$Pheno ~ burden.cast))
# e.g. for CAST
summary(lm(pheno_file$Pheno ~ burden.cast))
summary(lm(pheno_file$Pheno ~ burden.mz))
summary(lm(pheno_file$Pheno ~ burden.weighted))
# first fit the null model
skat.null <- SKAT_Null_Model( pheno_file$Pheno ~ 1 , out_type = "C")
# Run SKAT association test (returns a list - p-value is in `$p.value`)
skat_sumstats <- SKAT(G, skat.null )
str(skat_sumstats)
skat_sumstats$p.value
# Example for rho = 0
rho <- 0
skat_sumstats_rho <- SKAT(G, skat.null, r.corr = rho )
skat_sumstats_rho$p.value
# Run SKATO association test using grid of rho values
skat_sumstats_rho_grid <- SKAT(G, skat.null, method="optimal.adj")
skat_sumstats_rho_grid$p.value
# `weights` vector is from Question 5
acat.weights <- weights * weights * maf * (1 - maf)
ACAT(sv_pvals$P, weights = acat.weights)
# Fill in the p-values
SKAT_pvalue <-
Burden_pvalue <-
ACATV_pvalue <-
# compute ACATO
ACAT( c(SKAT_pvalue, Burden_pvalue, ACATV_pvalue) )
# volcano plot hint: to make a scatterplot of variable var2 against var1 stored in the data frame, you can use:
with(sv_pvals, plot(x=BETA, y=-log(P))) # change 'var1' and 'var2' to the right names in sv_pvals
# volcano plot hint: to make a scatterplot of variable var2 against var1 stored in the data frame, you can use:
with(sv_pvals, plot(x=BETA, y=-log(P), xlab= "Effect sizes", ylab = "-lop)P")) # change 'var1' and 'var2' to the right names in sv_pvals
# volcano plot hint: to make a scatterplot of variable var2 against var1 stored in the data frame, you can use:
with(sv_pvals, plot(x=BETA, y=-log(P), xlab= "Effect sizes", ylab = "-lop(P)")) # change 'var1' and 'var2' to the right names in sv_pvals
rho <- 1
skat_sumstats_rho <- SKAT(G, skat.null, r.corr = rho )
skat_sumstats_rho$p.value #weighted burden
# Fill in the p-values
SKAT_pvalue <- 8.745405e-11
Burden_pvalue <- 0.2234603
ACATV_pvalue <- 0.00112117
# compute ACATO
ACAT( c(SKAT_pvalue, Burden_pvalue, ACATV_pvalue) )
plk_bn2 <- "C:/Users/blezn/Desktop/IASTATE/BWSISG/MOD19_Association-selected/Course Materials/plink"
regenie_script2 <- "/SISGM19/data/run_regenie(1).r"
source(regenie_script2)
regenie_script2 <- "C:/Users/blezn/Downloads/run_regenie(1).r"
source(regenie_script2)
regenie_script2 <- "C:/Users/blezn/Downloads/run_regenie (1).r"
source(regenie_script2)
N <- 10e3
# Generate a configuration file specifying allele frequencies (a,b) for Uniform(a,b) distribution
write(paste0("5000 common 0.05 0.5 1 1"), "sim.config")
write(paste0("5000 rare 0.001 0.01 1 1"), "sim.config", append = TRUE)
# Run PLINK1.9
cmd <- sprintf("%s --make-bed --simulate sim.config --simulate-ncases %d --simulate-ncontrols 0 --simulate-prevalence 0.1  --out cc_imb_geno", plk_bn, N)
system(cmd, intern = T)
# get FID/IID from FAM file
sample.ids <- fread("cc_imb_geno.fam", header = FALSE)
cmd
N <- 10e3
# Generate a configuration file specifying allele frequencies (a,b) for Uniform(a,b) distribution
write(paste0("5000 common 0.05 0.5 1 1"), "sim.config")
write(paste0("5000 rare 0.001 0.01 1 1"), "sim.config", append = TRUE)
# Run PLINK1.9
cmd <- sprintf("%s --make-bed --simulate sim.config --simulate-ncases %d --simulate-ncontrols 0 --simulate-prevalence 0.1  --out cc_imb_geno", plk_bn2, N)
system(cmd, intern = T)
plk_bn2 <- "C:/Users/blezn/Desktop/IASTATE/BWSISG/MOD19_Association-selected/Course_Materials/plink"
N <- 10e3
# Generate a configuration file specifying allele frequencies (a,b) for Uniform(a,b) distribution
write(paste0("5000 common 0.05 0.5 1 1"), "sim.config")
write(paste0("5000 rare 0.001 0.01 1 1"), "sim.config", append = TRUE)
# Run PLINK1.9
cmd <- sprintf("%s --make-bed --simulate sim.config --simulate-ncases %d --simulate-ncontrols 0 --simulate-prevalence 0.1  --out cc_imb_geno", plk_bn2, N)
system(cmd, intern = T)
# get FID/IID from FAM file
sample.ids <- fread("cc_imb_geno.fam", header = FALSE)
N <- nrow(sample.ids)
## Set prevalence = 10% (CCR 1:9)
y1 <- rbinom(N, 1, prob = 0.1 )
## Set prevalence = 1% (CCR 1:99)
y2 <- rbinom(N, 1, prob = 0.01 )
## Set prevalence = 0.5% (CCR 1:199)
y3 <- rbinom(N, 1, prob = 0.005 )
# write to file
fwrite(
data.frame(FID = sample.ids$V1, IID = sample.ids$V2, Y1 = y1, Y2 = y2, Y3 = y3),
"cc_imb_pheno.txt",
sep = "\t", na = NA, quote = FALSE
)
cmd <- sprintf('%s --bed cc_imb_geno --phenoFile cc_imb_pheno.txt --bt --step 2 --bsize 2000 --ignore-pred --out test_regenie', regenie_binary1)
cmd <- sprintf('%s --bed cc_imb_geno --phenoFile cc_imb_pheno.txt --bt --step 2 --bsize 2000 --ignore-pred --out test_regenie', regenie_binary)
regenie_script2 <- "C:/Users/blezn/Downloads/run_regenie (1).r"
source(regenie_script2)
cmd <- sprintf('%s --bed cc_imb_geno --phenoFile cc_imb_pheno.txt --bt --step 2 --bsize 2000 --ignore-pred --out test_regenie', regenie_binary)
sumstats.y1 <- run_regenie_step2_bt(
bedfile = "cc_imb_geno",
phenofile = "cc_imb_pheno.txt",
phenocol = "Y1",
bsize = 300
)
qq(10^-sumstats.y1$LOG10P)
plot.sumstats.hist <- function(df, title = ""){
df$Z_STAT <- sign(df$BETA) * sqrt(df$CHISQ)
ggplot(df,  aes(x = Z_STAT) ) +
geom_histogram(aes(y = after_stat(density)), colour="black", fill="white", bins = 100) +
stat_function(
fun = dnorm,
col = "red",
args = list(
mean = mean(df$Z_STAT, na.rm = TRUE),
sd = sd(df$Z_STAT, na.rm = TRUE)
)
) +
theme_bw(16) +
labs(title = title)
}
# for Y1
plot.sumstats.hist(sumstats.y1, title = "Y1")
plot.sumstats.hist.by.group <- function(df, title = ""){
df$Z_STAT <- sign(df$BETA) * sqrt(df$CHISQ)
df$group <- ifelse(grepl("rare", df$ID), "Rare SNPs", "Common SNPs")
# Step 2: Generate normal density data for each group
moment.ests <- with(df, tapply(Z_STAT, group, function(x) c(mean=mean(x, na.rm = TRUE), sd=sd(x, na.rm = TRUE))))
z_stat_seq <- seq(min(df$Z_STAT, na.rm = TRUE), max(df$Z_STAT, na.rm = TRUE), length.out = 100)
normal_curve_data <- do.call(rbind, lapply(unique(df$group), function(grp) {
mean <- moment.ests[[grp]]['mean']; sd <- moment.ests[[grp]]['sd']
density <- dnorm(z_stat_seq, mean = mean, sd = sd)
data.frame(Z_STAT = z_stat_seq, density = density, group = grp)
}))
ggplot(df,  aes(x = Z_STAT) ) +
geom_histogram(aes(y = ..density..), colour="black", fill="white", bins = 100) +
geom_line(data = normal_curve_data, aes(x = Z_STAT, y = density), col = "red", size = 1) +
facet_wrap(~group) +
theme_bw(16) +
labs(title = title)
}
# for Y1
plot.sumstats.hist.by.group(sumstats.y1, "Y1")
sumstats.y1.firth <- run_regenie_step2_bt(
bedfile = "cc_imb_geno",
phenofile = "cc_imb_pheno.txt",
phenocol = "Y1",
bsize = 300,
firth = TRUE
)
nrow(sample.ids)
dim(y1)
head(y1)
table(y1)
table(y2)
table(y3)
dim(sample.ids)
head(sample.ids)
table(sample.ids$V4)
table(sample.ids$V5)
table(sample.ids$V6)
skim(sample.ids)
sumstats.y1 <- run_regenie_step2_bt(
bedfile = "cc_imb_geno",
phenofile = "cc_imb_pheno.txt",
phenocol = "Y1",
bsize = 300
)
sumstats.y2 <- run_regenie_step2_bt(
bedfile = "cc_imb_geno",
phenofile = "cc_imb_pheno.txt",
phenocol = "Y2",
bsize = 300
)
sumstats.y3 <- run_regenie_step2_bt(
bedfile = "cc_imb_geno",
phenofile = "cc_imb_pheno.txt",
phenocol = "Y3",
bsize = 300
)
qq(10^-sumstats.y1$LOG10P)
qq(10^-sumstats.y2$LOG10P)
qq(10^-sumstats.y3$LOG10P)
# for Y1
plot.sumstats.hist(sumstats.y1, title = "Y1")
# for Y2
plot.sumstats.hist(sumstats.y1, title = "Y2")
# for Y3
plot.sumstats.hist(sumstats.y1, title = "Y3")
plot.sumstats.hist.by.group <- function(df, title = ""){
df$Z_STAT <- sign(df$BETA) * sqrt(df$CHISQ)
df$group <- ifelse(grepl("rare", df$ID), "Rare SNPs", "Common SNPs")
# Step 2: Generate normal density data for each group
moment.ests <- with(df, tapply(Z_STAT, group, function(x) c(mean=mean(x, na.rm = TRUE), sd=sd(x, na.rm = TRUE))))
z_stat_seq <- seq(min(df$Z_STAT, na.rm = TRUE), max(df$Z_STAT, na.rm = TRUE), length.out = 100)
normal_curve_data <- do.call(rbind, lapply(unique(df$group), function(grp) {
mean <- moment.ests[[grp]]['mean']; sd <- moment.ests[[grp]]['sd']
density <- dnorm(z_stat_seq, mean = mean, sd = sd)
data.frame(Z_STAT = z_stat_seq, density = density, group = grp)
}))
ggplot(df,  aes(x = Z_STAT) ) +
geom_histogram(aes(y = ..density..), colour="black", fill="white", bins = 100) +
geom_line(data = normal_curve_data, aes(x = Z_STAT, y = density), col = "red", size = 1) +
facet_wrap(~group) +
theme_bw(16) +
labs(title = title)
}
# for Y1
plot.sumstats.hist.by.group(sumstats.y1, "Y1")
# for Y2
plot.sumstats.hist.by.group(sumstats.y1, "Y2")
# for Y3
plot.sumstats.hist.by.group(sumstats.y1, "Y3")
# for Y1
plot.sumstats.hist.by.group(sumstats.y1, "Y1")
# for Y2
plot.sumstats.hist.by.group(sumstats.y2, "Y2")
# for Y3
plot.sumstats.hist.by.group(sumstats.y3, "Y3")
# for Y1
plot.sumstats.hist(sumstats.y1, title = "Y1")
# for Y2
plot.sumstats.hist(sumstats.y2, title = "Y2")
# for Y3
plot.sumstats.hist(sumstats.y3, title = "Y3")
qq(10^-sumstats.y1.firth$LOG10P)
plot.sumstats.hist.by.group(sumstats.y1.firth, "Y2 with Firth")
sumstats.y1.firth <- run_regenie_step2_bt(
bedfile = "cc_imb_geno",
phenofile = "cc_imb_pheno.txt",
phenocol = "Y1",
bsize = 300,
firth = TRUE
)
sumstats.y2.firth <- run_regenie_step2_bt(
bedfile = "cc_imb_geno",
phenofile = "cc_imb_pheno.txt",
phenocol = "Y2",
bsize = 300,
firth = TRUE
)
sumstats.y3.firth <- run_regenie_step2_bt(
bedfile = "cc_imb_geno",
phenofile = "cc_imb_pheno.txt",
phenocol = "Y3",
bsize = 300,
firth = TRUE
)
qq(10^-sumstats.y1.firth$LOG10P)
qq(10^-sumstats.y2.firth$LOG10P)
qq(10^-sumstats.y3.firth$LOG10P)
plot.sumstats.hist.by.group(sumstats.y1.firth, "Y1 with Firth")
plot.sumstats.hist.by.group(sumstats.y2.firth, "Y2 with Firth")
plot.sumstats.hist.by.group(sumstats.y3.firth, "Y3 with Firth")
CHISQ <- function(N=10000,  # Sample size
M=1000,   # Number of SNPs tested
Fst=0.025,# Genetic differentiation between subgroups
vs=.05,   # variance explained by stratification
g=2,      # Number of subgroups
nPC=10){  # Number of PCs fitted
ms   <- rnorm(n=g,mean=0,sd=sqrt(vs))
p    <- runif(n=M,min=0.05,max=0.95)
tab  <- cut(1:N,breaks = quantile(1:N,probs = seq(0,1,len=g+1)),include.lowest = TRUE)
grp  <- as.numeric(tab)
simPS <- function(N,M,Fst,p,g){
a    <- p*(1-Fst)/Fst
b    <- (1-Fst)*(1-p)/Fst
tab  <- cut(1:N,breaks = quantile(1:N,probs = seq(0,1,len=g+1)),include.lowest = TRUE)
grp  <- as.numeric(tab)
n    <- as.numeric(table(tab))
X    <- do.call("rbind",lapply(1:g, function(k){
px <- rbeta(M,shape1=a,shape2=b)
do.call("cbind",lapply(1:M, function(j){
rbinom(n=n[k],size=2,prob=px[j])
}))
}))
return(X)
}
Xm  <- simPS(N,M,Fst,p,g) # Simulage genotypes of mother
Xf  <- simPS(N,M,Fst,p,g) # Simulate genotyoes of father
X1 <- do.call("cbind",lapply(1:M, function(j){
rbinom(n=N,size=1,prob=Xm[,j]/2) + rbinom(n=N,size=1,prob=Xf[,j]/2)
}))
X2 <- do.call("cbind",lapply(1:M, function(j){
rbinom(n=N,size=1,prob=Xm[,j]/2) + rbinom(n=N,size=1,prob=Xf[,j]/2)
}))
Y1 <- rnorm(n=N,mean=ms[grp],sd=sqrt(1-vs))
Y2 <- rnorm(n=N,mean=ms[grp],sd=sqrt(1-vs))
## PCA
SVD <- svd(scale(X1))
system.time( pcs <- SVD$u )
PC1 <- pcs[,1] * SVD$d[1]
PC2 <- pcs[,2] * SVD$d[2]
plot(PC1,PC2,pch=19,cex=0.5,col=grp,axes=FALSE,
xlab="PC1",ylab="PC2")
axis(1);axis(2)
abline(h=0,v=0,col="grey")
## GWAS
gwas_pop <- do.call("rbind",lapply(1:M, function(j){
summary(lm(Y1~X1[,j]))$coefficients[2,]
}))
gwas_pcs <- do.call("rbind",lapply(1:M, function(j){
summary(lm(Y1~X1[,j] + pcs[,1:nPC]))$coefficients[2,]
}))
gwas_wf <- do.call("rbind",lapply(1:M, function(j){
summary(lm(I(Y1-Y2)~I(X1[,j]-X2[,j])))$coefficients[2,]
}))
ChisqUnAdj  <- mean(gwas_pop[,3]^2)
ChisqPCAdj  <- mean(gwas_pcs[,3]^2)
ChisqQFAM   <- mean(gwas_wf[,3]^2)
return(c(UnAdj=ChisqUnAdj,PCAdj=ChisqPCAdj,QFAM=ChisqQFAM))
}
set.seed(27072022)
system.time( testResults <- CHISQ(N=10000,M=1000,Fst=.025,vs=.05,g=2) )
testResults
set.seed(2024)
system.time( testResults <- CHISQ(N=10000,M=1000,Fst=.025,vs=.05,g=2) )
testResults
CHISQ(N=10000,M=1000,Fst=.025,vs=.05,g=5,nPC=10)
CHISQ(N=10000,M=1000,Fst=.025,vs=.05,g=10,nPC=10)
CHISQ(N=10000,M=1000,Fst=.025,vs=.05,g=50,nPC=10)
## Let's try fitting 50 PCs
CHISQ(N=10000,M=1000,Fst=.025,vs=.05,g=50,nPC=50)
CHISQ(N=10000,M=1000,Fst=.1,vs=.1,g=50,nPC=10)
CHISQ(N=10000,M=1000,Fst=.1,vs=.1,g=50,nPC=50)
CHISQ(N=10000,M=1000,Fst=.1,vs=.1,g=50,nPC=50)
library(biomaRt)
BiocManager::install("biomaRt")
library(biomaRt)
ds4 <- data.frame(CHR = c("6", "2"),
chr_start = c('95880424', '6278864'),
chr_end = c('96003497', '6285486'))
snp_mart <- useEnsembl(biomart="ENSEMBL_MART_SNP",
dataset="btaurus_snp")
location <- apply(ds4, 1, paste, collapse = ":")
cat(paste0("PRKG2 location:", location[1], "\n"))
cat(paste0("MSTN location:", location[2], "\n"))
result <- getBM(attributes = c('refsnp_id', 'allele', 'chrom_start'),
filters = 'chromosomal_region',
values = location,
mart = snp_mart)
head(result)
length(result$refsnp_id)
?useEnsembl
?SCAT
?SKAT
summary(logit)$coefficients
hist(famData[-c(1,2)],xlim= 4 * c(-1,1) * sqrt(Vp),
main="",xlab="Within-family Phenotype distribution")
set.seed(12345678)
simPhenoFamily <- function(
nOffsprings, # number of children
Vg,          # (Additive) Genetic variance in the population
Ve,          # Environmental variance
M            # number of causal SNPs
){
## Allele Frequencies are simulated using a uniform distribution between 0.05 and 0.95
AlleleFrequencies   <- runif(M,min=0.05,max=0.95)
# Expected heterozygosity under Hardy-Weinberg Equilibrium
ExpectHeteHWE       <- 2 * AlleleFrequencies * (1 - AlleleFrequencies)
# SNP effects are simulated using a normal distribution with mean 0 and variance
SNPEffects          <- rnorm(M,mean=0,sd=sqrt(Vg/(M * ExpectHeteHWE)))
# Expected Population mean
PopulationMeanPheno <- sum(2 * AlleleFrequencies * SNPEffects)
## Simulate SNPs in derived populations
genoParent1  <- sapply(1:M,function(j) rbinom(1,size=2,prob=AlleleFrequencies[j]))
genoParent2  <- sapply(1:M,function(j) rbinom(1,size=2,prob=AlleleFrequencies[j]))
## Breeding values in the derived population
geneticValueParent1 <- c(genoParent1%*%SNPEffects)
geneticValueParent2 <- c(genoParent2%*%SNPEffects)
## Residuals
NonGeneticValueParent1  <- rnorm(1,mean=0,sd=sqrt(Ve))
NonGeneticValueParent2  <- rnorm(1,mean=0,sd=sqrt(Ve))
## Phenotypes
PhenoParent1  <- geneticValueParent1 + NonGeneticValueParent1
PhenoParent2  <- geneticValueParent2 + NonGeneticValueParent2
## Simulate Offspring
PhenoOffspring <- rep(NA,nOffsprings)
for(idOffspring in 1:nOffsprings){
AlleleTransmittedByParent1 <- rbinom(M,size=1,prob = genoParent1/2)
AlleleTransmittedByParent2 <- rbinom(M,size=1,prob = genoParent2/2)
genoOffspring <- AlleleTransmittedByParent1 + AlleleTransmittedByParent2
geneticValueOffspring        <- c(genoOffspring%*%SNPEffects)
NonGeneticValueOffspring     <- rnorm(1,mean=0,sd=sqrt(Ve))
PhenoOffspring[idOffspring]  <- geneticValueOffspring + NonGeneticValueOffspring
}
return(c(PhenoParent1,PhenoParent2,PhenoOffspring) - PopulationMeanPheno )
}
Vg      <- 3
Ve      <- 4
Vp      <- Vg + Ve
h2      <- Vg / Vp
famData <- simPhenoFamily(nOffsprings = 1000,Vg=Vg,Ve=Ve,M=10000)
meanPar <- mean(famData[c(1,2)])  # mean of parent phenotypes
meanOff <- mean(famData[-c(1,2)]) # mean of offspring phenotypes
varOff  <- var(famData[-c(1,2)])  # variance of offspring phenotypes
cat(paste0("Parent Mean = ",round(meanPar,3),
" - Offspring Mean = ",round(meanOff,3),
" - Offspring Variance = ",round(varOff,3),".\n"))
hist(famData[-c(1,2)],xlim= 4 * c(-1,1) * sqrt(Vp),
main="",xlab="Within-family Phenotype distribution")
abline(v=meanPar,col="dodgerblue",lwd=2,lty=1)
abline(v=meanOff,col="orange",lwd=2,lty=2)
legend("topleft",legend=c("Parent Average","Offspring Average"),
box.lty=0,lty=1:2,col=c("dodgerblue","orange"))
h2
4/3
2/6
Vg      <- 3
Ve      <- 4
Vp      <- Vg + Ve
h2      <- Vg / Vp
famData <- simPhenoFamily(nOffsprings = 1000,Vg=Vg,Ve=Ve,M=1000)
meanPar <- mean(famData[c(1,2)])  # mean of parent phenotypes
meanOff <- mean(famData[-c(1,2)]) # mean of offspring phenotypes
varOff  <- var(famData[-c(1,2)])  # variance of offspring phenotypes
cat(paste0("Parent Mean = ",round(meanPar,3),
" - Offspring Mean = ",round(meanOff,3),
" - Offspring Variance = ",round(varOff,3),".\n"))
hist(famData[-c(1,2)],xlim= 4 * c(-1,1) * sqrt(Vp),
main="",xlab="Within-family Phenotype distribution")
abline(v=meanPar,col="dodgerblue",lwd=2,lty=1)
abline(v=meanOff,col="orange",lwd=2,lty=2)
legend("topleft",legend=c("Parent Average","Offspring Average"),
box.lty=0,lty=1:2,col=c("dodgerblue","orange"))
3/7
3/5
Vg      <- 3
Ve      <- 2
Vp      <- Vg + Ve
h2      <- Vg / Vp
famData <- simPhenoFamily(nOffsprings = 1000,Vg=Vg,Ve=Ve,M=1000)
meanPar <- mean(famData[c(1,2)])  # mean of parent phenotypes
meanOff <- mean(famData[-c(1,2)]) # mean of offspring phenotypes
varOff  <- var(famData[-c(1,2)])  # variance of offspring phenotypes
cat(paste0("Parent Mean = ",round(meanPar,3),
" - Offspring Mean = ",round(meanOff,3),
" - Offspring Variance = ",round(varOff,3),".\n"))
hist(famData[-c(1,2)],xlim= 4 * c(-1,1) * sqrt(Vp),
main="",xlab="Within-family Phenotype distribution")
abline(v=meanPar,col="dodgerblue",lwd=2,lty=1)
abline(v=meanOff,col="orange",lwd=2,lty=2)
legend("topleft",legend=c("Parent Average","Offspring Average"),
box.lty=0,lty=1:2,col=c("dodgerblue","orange"))
Vg      <- 3
Ve      <- 2
Vp      <- Vg + Ve
h2      <- Vg / Vp
famData <- simPhenoFamily(nOffsprings = 1000,Vg=Vg,Ve=Ve,M=10000)
meanPar <- mean(famData[c(1,2)])  # mean of parent phenotypes
meanOff <- mean(famData[-c(1,2)]) # mean of offspring phenotypes
varOff  <- var(famData[-c(1,2)])  # variance of offspring phenotypes
cat(paste0("Parent Mean = ",round(meanPar,3),
" - Offspring Mean = ",round(meanOff,3),
" - Offspring Variance = ",round(varOff,3),".\n"))
hist(famData[-c(1,2)],xlim= 4 * c(-1,1) * sqrt(Vp),
main="",xlab="Within-family Phenotype distribution")
abline(v=meanPar,col="dodgerblue",lwd=2,lty=1)
abline(v=meanOff,col="orange",lwd=2,lty=2)
legend("topleft",legend=c("Parent Average","Offspring Average"),
box.lty=0,lty=1:2,col=c("dodgerblue","orange"))
Vg      <- 3
Ve      <- 4
Vp      <- Vg + Ve
h2      <- Vg / Vp
famData <- simPhenoFamily(nOffsprings = 1000,Vg=Vg,Ve=Ve,M=10000)
meanPar <- mean(famData[c(1,2)])  # mean of parent phenotypes
meanOff <- mean(famData[-c(1,2)]) # mean of offspring phenotypes
varOff  <- var(famData[-c(1,2)])  # variance of offspring phenotypes
cat(paste0("Parent Mean = ",round(meanPar,3),
" - Offspring Mean = ",round(meanOff,3),
" - Offspring Variance = ",round(varOff,3),".\n"))
hist(famData[-c(1,2)],xlim= 4 * c(-1,1) * sqrt(Vp),
main="",xlab="Within-family Phenotype distribution")
abline(v=meanPar,col="dodgerblue",lwd=2,lty=1)
abline(v=meanOff,col="orange",lwd=2,lty=2)
legend("topleft",legend=c("Parent Average","Offspring Average"),
box.lty=0,lty=1:2,col=c("dodgerblue","orange"))
cat(paste0("Vg = ",Vg," - Ve = ",Ve," - h2 = ",h2," - nOffsprings = ",1000"," - Causal variants = ",10000.\n"))
cat(paste0("Vg = ",Vg," - Ve = ",Ve," - h2 = ",h2," - nOffsprings = ",1000"," - Causal variants = ",10000,".\n"))
cat(paste0("Vg = ",Vg," - Ve = ",Ve," - h2 = ",h2," - nOffsprings = ",1000," - Causal variants = ",10000,".\n"))
cat(paste0("Vg = "3," - Ve = ",2," - h2 = ",0.60," - nOffsprings = ",1000," - Causal variants = ",10000,".\n"))
cat(paste0("Vg = ",3," - Ve = ",2," - h2 = ",0.60," - nOffsprings = ",1000," - Causal variants = ",10000,".\n"))
?Rcpp
?SKAT
?ACAT
